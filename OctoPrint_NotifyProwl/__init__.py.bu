# coding=utf-8
from __future__ import absolute_import

### (Don't forget to remove me)
# This is a basic skeleton for your plugin's __init__.py. You probably want to adjust the class name of your plugin
# as well as the plugin mixins it's subclassing from. This is really just a basic skeleton to get you started,
# defining your plugin as a template plugin, settings and asset plugin. Feel free to add or remove mixins
# as necessary.
#
# Take a look at the documentation on what other plugin mixins are available.


import octoprint.plugin
import octoprint.events

class NotifyprowlPlugin(octoprint.plugin.SettingsPlugin,
                        octoprint.plugin.AssetPlugin,
			octoprint.plugin.StartupPlugin,
                        octoprint.plugin.TemplatePlugin,
			octoprint.plugin.EventHandlerPlugin):

	# def on_after_startup(self):
	#	self._logger.info("Hello World!  I am here.")

	#~~ EventPlugin API
	def on_event(self, event, payload):
		import os
		import prowler

		apikey = 'a8f9ee86009aeb552fc916e373d402ba4b983dd8'

		noteType = title = description = None

		if event == octoprint.events.Events.UPLOAD:
			file = payload["file"]
			target = payload["target"]
			prowlPriority = 0  # 0=Normal, -1=Moderate, -2=VeryLow, 1=High, 2=Emergency
	 		self._logger.info("NotifyProwl received UPLOAD event")

			# key, message, priority, app, event, providerkey
			try:
			  prowler.post(key=apikey, message=file + " was uploaded", priority=prowlPriority, app="OctoPrint", event="File Uploaded")
			except Exception as msg:
			  self._logger.info("Prowl notification failed: " + str(msg))

	##~~ SettingsPlugin mixin

	def get_settings_defaults(self):
		return dict(
			# put your plugin's default settings here
		)

	##~~ AssetPlugin mixin

	def get_assets(self):
		# Define your plugin's asset files to automatically include in the
		# core UI here.
		return dict(
			js=["js/NotifyProwl.js"],
			css=["css/NotifyProwl.css"],
			less=["less/NotifyProwl.less"]
		)

	##~~ Softwareupdate hook

	def get_update_information(self):
		# Define the configuration for your plugin to use with the Software Update
		# Plugin here. See https://github.com/foosel/OctoPrint/wiki/Plugin:-Software-Update
		# for details.
		return dict(
			NotifyProwl=dict(
				displayName="Notifyprowl Plugin",
				displayVersion=self._plugin_version,

				# version check: github repository
				type="github_release",
				user="mrcompsci",
				repo="OctoPrint-NotifyProwl",
				current=self._plugin_version,

				# update method: pip
				pip="https://github.com/mrcompsci/OctoPrint-NotifyProwl/archive/{target_version}.zip"
			)
		)


# If you want your plugin to be registered within OctoPrint under a different name than what you defined in setup.py
# ("OctoPrint-PluginSkeleton"), you may define that here. Same goes for the other metadata derived from setup.py that
# can be overwritten via __plugin_xyz__ control properties. See the documentation for that.
__plugin_name__ = "NotifyProwl"

def __plugin_load__():
	global __plugin_implementation__
	__plugin_implementation__ = NotifyprowlPlugin()

	global __plugin_hooks__
	__plugin_hooks__ = {
		"octoprint.plugin.softwareupdate.check_config": __plugin_implementation__.get_update_information
	}

